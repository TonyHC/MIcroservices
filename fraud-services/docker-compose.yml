version: '3.9'

x-postgres-image:
  &postgres-image
  postgres:14.5

x-postgres-env:
  &postgres-env
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: password
  PGDATA: /data/postgres

x-postgres-restart-policy:
  &postgres-restart-policy
  unless-stopped

services:
  postgres-customer:
    container_name: postgres-customer
    image: *postgres-image
    environment: *postgres-env
    volumes:
      - ./docker/database/customer:/docker-entrypoint-initdb.d
      - postgres-customer:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: *postgres-restart-policy
  postgres-fraud:
    container_name: postgres-fraud
    image: *postgres-image
    environment: *postgres-env
    volumes:
      - ./docker/database/fraud:/docker-entrypoint-initdb.d
      - postgres-fraud:/data/postgres
    ports:
      - "5433:5432"
    networks:
      - postgres
    restart: *postgres-restart-policy
  postgres-notification:
    container_name: postgres-notification
    image: *postgres-image
    environment: *postgres-env
    volumes:
      - ./docker/database/notification:/docker-entrypoint-initdb.d
      - postgres-notification:/data/postgres
    ports:
      - "5434:5432"
    networks:
      - postgres
    restart: *postgres-restart-policy
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:6.15
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped
  zipkin:
    image: openzipkin/zipkin:2.23
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:5.4.10
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - spring
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:5.4.10
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    networks:
      - spring
  rabbitmq:
    image: rabbitmq:3.9.22-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - spring
  #  eureka-server:
  #    image: tchao98/eureka-server:latest
  #    container_name: eureka-server
  #    ports:
  #      - "8761:8761"
  #    environment:
  #      - SPRING_PROFILES_ACTIVE=docker
  #    networks:
  #      - spring
  #    depends_on:
  #      - zipkin
  #  api-gateway:
  #    image: tchao98/api-gateway:latest
  #    container_name: api-gateway
  #    ports:
  #      - "8083:8083"
  #    environment:
  #      - SPRING_PROFILES_ACTIVE=docker
  #    networks:
  #      - spring
  #    depends_on:
  #      - zipkin
  #      - eureka-server
  customer:
    image: tchao98/customer:latest
    container_name: customer
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - zipkin
      - postgres-customer
      - kafka
  fraud:
    image: tchao98/fraud:latest
    container_name: fraud
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - zipkin
      - postgres-fraud
      - kafka
  notification:
    image: tchao98/notification:latest
    container_name: notification
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - zipkin
      - postgres-notification
      - kafka

networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge

volumes:
  postgres-customer:
  postgres-fraud:
  postgres-notification:
  pgadmin: